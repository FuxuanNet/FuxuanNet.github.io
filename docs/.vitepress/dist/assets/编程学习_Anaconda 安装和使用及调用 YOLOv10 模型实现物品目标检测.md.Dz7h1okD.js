import{_ as i,c as a,aN as n,o as t}from"./chunks/framework.C12FJ_o-.js";const l="/assets/Q4MjbAthioihs7x6nTHcQpKRnzd.B6rfJFn9.png",p="/assets/W185bMGbcoauwfxoQhBcrtwWnzf.CMGlFHcL.png",h="/assets/Enq9bT0OloPXC5x5LPucFfUKnxc.T1D31umF.png",e="/assets/I8mZb8uvNoizitxxgUacwsK0n6L.DQFAKNFl.png",o="/assets/N6d7b1LGRoBMHvx04nTcS0fnnPf.d-VABmCg.png",k="/assets/SPz2be0IGoSHZnx9Ustcpn5en8s.BsEyEOgd.png",r="/assets/OvP3bQdukoszbTxusRocGsIAn1g.DfBc91Ug.png",d="/assets/UfUObUOkEo2eY8xxvh1cRH8NnKb.B_HMCaUt.png",c="/assets/Jbc3bVw1moZ6LpxWXdscHQhNntc.CMvyoysG.png",g="/assets/GZaAbr5TGoGdKhxxWQUcGpFlnPd.CqSLtQ9J.png",E="/assets/Moj1bzQIKovSd5xz2ZCc3Ofpnkg.CEFnfgK1.png",y="/assets/RpEnb9NOFogyebxTRGocTK8mnTe.BLPWhLqn.png",m="/assets/T58mbqAq5opNjExCkkccnP42nAc.CAv93YZZ.png",u="/assets/B99bbQmDHoAOd3xU80QcownJnOe.BKsiRHK8.png",F="/assets/EdwJbHFako9S4RxyM6WcKSJ5n72.WGeul-1p.png",b="/assets/LrbpbfDl2oHSHsxKinzcWOkan8g.BGtJLdhE.png",A="/assets/JCAQbMRkPo7n3Wx0aqtc0jejnsc.rrh0v7A4.png",_="/assets/XLdKbxZi7oj42rx1xiXcZ6cUnCg.BoppJ3HJ.png",P=JSON.parse('{"title":"Anaconda 安装和使用及调用 YOLOv10 模型实现物品目标检测","description":"","frontmatter":{"title":"Anaconda 安装和使用及调用 YOLOv10 模型实现物品目标检测","date":"2024-10-22T00:00:00.000Z","details":"关于 Anaconda 的环境配置，以及使用它来运行一个 Python 代码。不过官网模型的下载步骤已更新，与本文不同，本文调用 YOLOv10 的教程已经过时，请读者参考官网的说明文档进行配置。","showInHome":true},"headers":[],"relativePath":"编程学习/Anaconda 安装和使用及调用 YOLOv10 模型实现物品目标检测.md","filePath":"编程学习/Anaconda 安装和使用及调用 YOLOv10 模型实现物品目标检测.md"}'),D={name:"编程学习/Anaconda 安装和使用及调用 YOLOv10 模型实现物品目标检测.md"};function v(C,s,x,q,f,B){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="anaconda-安装和使用及调用-yolov10-模型实现物品目标检测" tabindex="-1">Anaconda 安装和使用及调用 YOLOv10 模型实现物品目标检测 <a class="header-anchor" href="#anaconda-安装和使用及调用-yolov10-模型实现物品目标检测" aria-label="Permalink to &quot;Anaconda 安装和使用及调用 YOLOv10 模型实现物品目标检测&quot;">​</a></h1><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><blockquote><p>我们想要目标检测一个物体，并识别它的类别。</p></blockquote><h2 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>YOLOv10 是清华大学研究人员近期提出的一种实时目标检测方法，我们将基于它来实现。</p></div><h2 id="配置环境" tabindex="-1">配置环境 <a class="header-anchor" href="#配置环境" aria-label="Permalink to &quot;配置环境&quot;">​</a></h2><blockquote><p>进入 GitHub 仓库查看其开源代码及环境配置，我们发现想要运行代码，不仅需要 python 3.9 的版本，还要安装众多指定版本的第三方库：</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">torch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">torchvision</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onnx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onnxruntime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pycocotools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PyYAML</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scipy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onnxslim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.31</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onnxruntime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gpu</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">opencv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">python</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.0.80</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">psutil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">py</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cpuinfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">huggingface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">safetensors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.3</span></span></code></pre></div><p>因此，我们需要安装 Python 3.9 以及上面所提及的第三方库，版本一定要完全对应。</p><p>但是，可能有一些人事先安装好了 Python，甚至装过上面的第三方库，可是<strong>版本</strong>与代码所需版本不匹配，甚至还会有<strong>冲突</strong>。为了避免因版本不一致导致的各种潜在环境，我们选择使用 <strong>Anaconda</strong> 来创建一个 python 3.9 的虚拟环境，并安装所需的第三方库。</p><h2 id="anaconda-的下载、安装与虚拟环境的创建、激活" tabindex="-1"><strong>Anaconda 的下载、安装与虚拟环境的创建、激活</strong> <a class="header-anchor" href="#anaconda-的下载、安装与虚拟环境的创建、激活" aria-label="Permalink to &quot;&lt;strong&gt;Anaconda 的下载、安装与虚拟环境的创建、激活&lt;/strong&gt;&quot;">​</a></h2><p>建议：把之前安装的 python 卸载掉。</p><h3 id="下载-anaconda" tabindex="-1"><strong>下载 Anaconda</strong> <a class="header-anchor" href="#下载-anaconda" aria-label="Permalink to &quot;&lt;strong&gt;下载 Anaconda&lt;/strong&gt;&quot;">​</a></h3><p>这是国内清华大学提供的 Anaconda 镜像站，无需使用梯子，请关闭代理再进行下载。<a href="https://mirror.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Windows-x86_64.exe" target="_blank" rel="noreferrer">Anaconda 64 位下载地址</a></p><h3 id="安装-anaconda" tabindex="-1"><strong>安装 Anaconda</strong> <a class="header-anchor" href="#安装-anaconda" aria-label="Permalink to &quot;&lt;strong&gt;安装 Anaconda&lt;/strong&gt;&quot;">​</a></h3><p>选择为所有用户安装，并选择自定义安装路径。</p><p><img src="`+l+'" alt="图片" loading="lazy"></p><p>安装路径请选择到系统的根目录，如 D 盘，如下图，这样方便我们进行环境变量的配置。</p><p><img src="'+p+'" alt="图片" loading="lazy"></p><p>安装过程中，出现 Advanced options 选项:</p><p>第一个选项是自动配置到系统的环境变量中，虽然它很方便，但如果我们后期想要对其进行<strong>卸载与重装</strong>，就会特别麻烦，所以我们先不选，一会二我们手动配置。</p><p><img src="'+h+'" alt="图片" loading="lazy"></p><p>进度条走完之后:</p><p><img src="'+e+'" alt="图片" loading="lazy"></p><p><img src="'+o+'" alt="图片" loading="lazy"></p><h3 id="配置环境变量" tabindex="-1"><strong>配置环境变量</strong> <a class="header-anchor" href="#配置环境变量" aria-label="Permalink to &quot;&lt;strong&gt;配置环境变量&lt;/strong&gt;&quot;">​</a></h3><p>在配置之前，请一定要观看这个视频，了解一下什么是环境变量。</p><p><img src="'+k+'" alt="图片" loading="lazy"></p><p>把这几条复制到系统环境变量里面（注意我的安装路径是 <code>D:\\Anaconda</code> 这个目录，请根据自己实际安装目录进行改动，比如装在 C 盘根目录，就把所有 D 改成 C 就可以的）：</p><p>打开终端，输入 <code>conda --version</code>，如果出现版本号，说明环境变量配置成功。</p><h3 id="创建与激活虚拟环境" tabindex="-1"><strong>创建与激活虚拟环境</strong> <a class="header-anchor" href="#创建与激活虚拟环境" aria-label="Permalink to &quot;&lt;strong&gt;创建与激活虚拟环境&lt;/strong&gt;&quot;">​</a></h3><p>下载好之后，电脑里会有这个文件夹：</p><p><img src="'+r+'" alt="图片" loading="lazy"></p><p>打开它，然后打开 Anaconda Prompt，输入以下命令：</p><p><code>conda</code> 是我们刚刚下载好的软件，<code>create</code> 是创建的意思，<code>-n</code> 代表 <code>name</code> 命名，后面跟着的就是我们给这个环境起的名字，因为我们要跑的代码就是 yolov10 模型，所以为了好记，我们就把这个环境也命名为 yolov10，<code>python=3.9</code> 就是代表着我们创建的环境中的 python 版本为 3.9。</p><p><img src="'+d+'" alt="图片" loading="lazy"></p><p>所以上面这条命令的意思是创建一个名为 yolov10 的虚拟环境，并指定 python 版本为 3.9。</p><p>中间会提示你是否创建，请输入 <code>y</code>，然后回车。</p><p>创建好之后，输入以下命令激活进入这个虚拟环境：</p><p>进入 yolov10 环境后，前面的括号会变成你的环境名，请不要关闭这个黑框框，因为后期我们还会用到。</p><p><img src="'+c+'" alt="图片" loading="lazy"></p><p>此时，我们就可以开始配置我们的代码运行环境了。</p><p>如果上面有报错，可能是网络问题，请打开或关闭<strong>代理</strong>或<strong>换用其他镜像源</strong>试一试。</p><h2 id="yolov10-的安装与使用" tabindex="-1">YOLOv10 的安装与使用 <a class="header-anchor" href="#yolov10-的安装与使用" aria-label="Permalink to &quot;YOLOv10 的安装与使用&quot;">​</a></h2><h3 id="下载它的源代码" tabindex="-1">下载它的源代码 <a class="header-anchor" href="#下载它的源代码" aria-label="Permalink to &quot;下载它的源代码&quot;">​</a></h3><p>打开代理，访问 <a href="https://github.com/THU-MIG/yolov10" target="_blank" rel="noreferrer">yolov10 的 GitHub 仓库</a>，点击 <code>Code</code> 按钮，选择 <code>Download ZIP</code> 下载源代码。</p><p><img src="'+g+'" alt="图片" loading="lazy"></p><p>下载完成后，将代码解压到任意一个文件夹中，比如 <code>D:\\yolov10</code> ，之后我们会在这个文件夹中运行代码。</p><p>还记得我们之前在黑框框上面激活的 <code>yolov10</code> 环境吗？现在，我们继续使用它。</p><blockquote><p><strong>终端命令行知识操作普及：</strong> 我们需要在这个黑框框中进入刚刚解压的 <code>yolov10</code> 文件夹，但是，我们的路径目前是在 <code>C:\\Users\\用户名</code>，路径默认是在 C 盘的，但如果我们的代码是在 D 盘，如果使用终端，又该怎么进入呢？ <img src="'+E+'" alt="图片" loading="lazy"> 这里我来亲自演示一下，我将把代码装到我的电脑里 D 盘的 <code>programming</code> 文件夹中的 <code>yolov10</code> 文件夹中，那么路径应该是 <code>D:\\programming\\yolov10</code> 。所以，我需要先进 入 D 盘，然后进入 <code>programming</code> 文件夹，最后 <code>yolov10</code> 文件夹。</p></blockquote><h2 id="代码环境配置" tabindex="-1">代码环境配置 <a class="header-anchor" href="#代码环境配置" aria-label="Permalink to &quot;代码环境配置&quot;">​</a></h2><h3 id="如何在-anaconda-prompt-中进入-d-programming-yolov10" tabindex="-1">如何在 Anaconda Prompt 中进入 <code>D:\\programming\\yolov10</code>? <a class="header-anchor" href="#如何在-anaconda-prompt-中进入-d-programming-yolov10" aria-label="Permalink to &quot;如何在 Anaconda Prompt 中进入 `D:\\programming\\yolov10`?&quot;">​</a></h3><ol><li>继续聚焦于我们的<strong> Anaconda Prompt 窗口</strong>，输入 <code>D:</code> ，然后回车，这样就可以进入 D 盘了。</li></ol><p><img src="'+y+'" alt="图片" loading="lazy"></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>知识点：在 Windows 系统中，<code>D:</code> 就可以切换到 D 盘，其他盘同理。</p></div><ol><li>输入 <code>cd D:\\programming\\yolov10</code> ，然后回车，这样就可以进入 <code>D:\\programming\\yolov10</code> 文件夹了。</li></ol><p><img src="'+m+'" alt="图片" loading="lazy"></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>知识点：<code>cd</code> 是 <code>change directory</code> 的缩写，意思是改变目录，后面跟着的路径就是我们要进入的路 径。如果你的路径是 <code>D:\\yolov10</code> ，那么就输入 <code>cd D:\\yolov10</code> 。</p></div><h3 id="下面就是配置环境了" tabindex="-1"><strong>下面就是配置环境了</strong> <a class="header-anchor" href="#下面就是配置环境了" aria-label="Permalink to &quot;&lt;strong&gt;下面就是配置环境了&lt;/strong&gt;&quot;">​</a></h3><ol><li>输入 <code>pip install -r requirements.txt -i ``https://pypi.doubanio.com/simple</code> ，安装对应版本的 python 包。注意<strong>不要开梯子</strong>，因为这里我用的是镜像源。</li></ol><p><img src="'+u+'" alt="图片" loading="lazy"></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>知识点： <code>pip install</code> 是安装 python 自带的 <code>pip</code> 的命令， <code>-r</code> 是读取 <code>requirements.txt</code> 文件中的包名，<code>-i</code> 是指定镜像源，这里我们使用的是豆瓣源，因为豆瓣源的速度在国内不使用比较快，你也可以换成清华源，或直接打开代理，输入 <code>pip install -r requirements.txt</code>。</p></div><p>如果遇到报错，请<strong>打开或关闭代理</strong>或<strong>换用其他镜像源</strong>试一试，如果都不可以，请谷歌搜索。</p><ol><li>输入<strong></strong><strong>pip install -e .</strong> 来安装源代码（注意末尾有<strong>点</strong>）。</li></ol><p>下面，代码的环境就配置好了，接下来，我们只要下载到<strong>别人训练好的模型</strong>，就可以运行代码了。</p><h2 id="下载模型" tabindex="-1">下载模型 <a class="header-anchor" href="#下载模型" aria-label="Permalink to &quot;下载模型&quot;">​</a></h2><blockquote><p>如下图所示，官网一共提供了 6 个模型，由于我们只是想演示一下，所以我们只下最小的 YOLOv10-N 就可以把代码跑起来了。 如果你感兴趣的话，也可以下其他几个模型，下面的教程都是通用的，只要在代码中把 YOLOv10-N 的名字替换成其他的五个模型的名字就可以了。 <img src="'+F+`" alt="图片" loading="lazy"></p></blockquote><ol><li>打开代理，下载 <code>YOLOv10-N</code>，把下载好的模型放到 <code>D:\\programming\\yolov10</code> 文件夹中，也就是 yolov10 文件夹的根目录。</li><li>在之前的 Anaconda Prompt 中输入 <code>code .</code> 就可以使用 VSCode 打开当前文件夹了。</li></ol><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><code>.</code> 代表当前文件夹， <code>code</code> 是 VSCode 的命令， <code>code .</code> 就可以打开当前文件夹。</p></div><ol><li>测试代码，在 文件夹的根目录下用 VSCode 创建一个 python 文件，比如就叫 <code>testDemo.py</code> ，然后输入以下代码。</li></ol><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>代码需要修改的有两个地方：</p></div><ul><li>首先是第 5 行，如果你下载的是其他模型，要改成对应模型的名字。</li><li>其次是第 8 行，要换成你自己的图片路径。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># testDemo.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cv2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ultralytics </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> YOLOv10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载模型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> YOLOv10(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yolov10n.pt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果使用的是其他模型，只需要把 yolov10n.pt 改成对应的模型名字就可以了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 批量运算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">results </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./yt.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里换成你的图片路径，如果要批量运算，只需要把 [&quot;&quot;] 改成 [&quot;图片1.jpg&quot;, &quot;图片2.jpg&quot;, &quot;图片3.jpg&quot;] 就可以了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> results:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    boxes_cls_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.boxes.cls)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boxes_cls_len:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 没有检测到内容</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        continue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boxes_cls_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(boxes_cls_len):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 获取类别id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        class_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.boxes.cls[boxes_cls_index].item())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 获取类别名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        class_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.names[class_id]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 获取相似度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        similarity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.boxes.conf[boxes_cls_index].item()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 获取坐标值，左上角 和 右下角：lt_rb的值：[1145.1351318359375, 432.6763000488281, 1275.398681640625, 749.5224609375]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lt_rb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.boxes.xyxy[boxes_cls_index].tolist()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 转为：[[1145.1351318359375, 432.6763000488281], [1275.398681640625, 749.5224609375]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lt_rb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[lt_rb[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], lt_rb[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], [lt_rb[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], lt_rb[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;类别：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, class_name, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;相似度：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, similarity, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;坐标：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lt_rb)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 图片展示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    annotated_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.plot()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    annotated_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> annotated_image[:, :, ::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> annotated_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cv2.imshow(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Annotated Image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, annotated_image)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cv2.waitKey(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cv2.destroyAllWindows()</span></span></code></pre></div><ol><li>运行代码 在 Anaconda Prompt 中输入 <code>python testDemo.py</code> ，然后回车，就可以运行代码了。不建议用 VSCode 插件来运行。 最好是像我一样在 Anaconda Prompt 中打指令。</li></ol><p><img src="`+b+'" alt="图片" loading="lazy"></p><h2 id="测试效果" tabindex="-1">测试效果 <a class="header-anchor" href="#测试效果" aria-label="Permalink to &quot;测试效果&quot;">​</a></h2><ul><li>我选的图片是这样的：</li></ul><p><img src="'+A+'" alt="图片" loading="lazy"></p><ul><li>输出结果：</li></ul><p><img src="'+_+'" alt="图片" loading="lazy"></p>',80)]))}const L=i(D,[["render",v]]);export{P as __pageData,L as default};
